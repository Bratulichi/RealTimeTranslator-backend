name: Version Bump

on:
  push:
    branches: [ "develop" ]

jobs:
  version-bump:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install toml
        run: pip install toml

      - name: Get commits and bump version
        run: |
          echo "=== Getting commits to analyze ==="
          
          # Находим последний коммит с version bump (если есть)
          LAST_VERSION_COMMIT=$(git log --oneline --grep="bump version" -n 1 --pretty=format:"%H" || echo "")
          
          if [ -n "$LAST_VERSION_COMMIT" ]; then
            echo "Last version bump commit: $LAST_VERSION_COMMIT"
            # Получаем коммиты с последнего version bump до HEAD
            COMMITS_RANGE="${LAST_VERSION_COMMIT}..HEAD"
          else
            echo "No previous version bump found, analyzing last 10 commits"
            # Если version bump коммитов не было, берем последние 10 коммитов
            COMMITS_RANGE="$(git rev-list --max-count=50 HEAD | tail -n1)..HEAD"
          fi
          
          echo "Analyzing commits in range: $COMMITS_RANGE"
          
          # Получаем список коммитов
          COMMITS=$(git log --pretty=format:"%s" $COMMITS_RANGE | grep -v "bump version" || echo "")
          
          if [ -z "$COMMITS" ]; then
            echo "No commits to analyze"
            exit 0
          fi
          
          echo "Commits to analyze:"
          echo "$COMMITS"
          echo ""
          
          # Экспортируем для Python
          export COMMITS="$COMMITS"
          
          python << 'EOF'
          import toml
          import os
          import re
          from pathlib import Path
          
          # Получаем коммиты из переменной окружения
          commits_text = os.environ.get('COMMITS', '').strip()
          if not commits_text:
              print("No commits to analyze")
              exit(0)
              
          commits = [line.strip() for line in commits_text.split('\n') if line.strip()]
          
          print(f"Analyzing {len(commits)} commits:")
          for i, commit in enumerate(commits, 1):
              print(f"  {i}. {commit}")
          
          # Читаем текущую версию (только для анализа)
          pyproject_path = Path("pyproject.toml")
          data = toml.load(pyproject_path)
          current_version = data["project"]["version"]
          print(f"\nCurrent version: {current_version}")
          
          version_parts = current_version.split(".")
          major, minor, patch = int(version_parts[0]), int(version_parts[1]), int(version_parts[2])
          
          # Анализируем коммиты
          has_major = False
          has_minor = False  
          has_fix = False
          
          for commit in commits:
              if commit.startswith("[major]"):
                  has_major = True
                  print(f"  → Found [major]: {commit}")
              elif commit.startswith("[minor]"):
                  has_minor = True
                  print(f"  → Found [minor]: {commit}")
              elif commit.startswith("[fix]"):
                  has_fix = True
                  print(f"  → Found [fix]: {commit}")
          
          # Определяем тип повышения
          if has_major:
              major += 1
              minor = 0
              patch = 0
              bump_type = "major"
              print(f"\nMAJOR version bump: {current_version} → {major}.{minor}.{patch}")
          elif has_minor:
              minor += 1
              patch = 0
              bump_type = "minor"
              print(f"\nMINOR version bump: {current_version} → {major}.{minor}.{patch}")
          elif has_fix:
              patch += 1
              bump_type = "patch"  
              print(f"\nPATCH version bump: {current_version} → {major}.{minor}.{patch}")
          else:
              print("\nNo version keywords found ([fix], [minor], [major]) - no version bump")
              exit(0)
          
          new_version = f"{major}.{minor}.{patch}"
          
          # === ВАЖНО: Сохраняем форматирование файла ===
          # Читаем файл как текст и заменяем только строку с версией
          with open(pyproject_path, 'r', encoding='utf-8') as f:
              content = f.read()
          
          # Ищем и заменяем строку version = "..." 
          version_pattern = r'^version\s*=\s*["\'][^"\']*["\']'
          new_version_line = f'version = "{new_version}"'
          
          updated_content = re.sub(version_pattern, new_version_line, content, flags=re.MULTILINE)
          
          # Проверяем, что замена произошла
          if updated_content == content:
              print("Failed to update version in pyproject.toml")
              exit(1)
          
          # Записываем обратно с сохранением форматирования
          with open(pyproject_path, 'w', encoding='utf-8') as f:
              f.write(updated_content)
          
          print(f"Version updated in pyproject.toml: {current_version} → {new_version}")
          print("File formatting preserved!")
          
          # Создаем флаг для следующего шага
          with open("version_updated.flag", "w") as f:
              f.write(f"{new_version}\n{bump_type}")
          EOF

      - name: Commit version change
        run: |
          if [ -f "version_updated.flag" ]; then
            NEW_VERSION=$(head -n 1 version_updated.flag)
            BUMP_TYPE=$(tail -n 1 version_updated.flag)
            
            echo "Committing version bump to $NEW_VERSION"
            git config user.name github-actions
            git config user.email github-actions@github.com
            git add pyproject.toml
            git commit -m "chore: bump version to ${NEW_VERSION} (${BUMP_TYPE})"
            git push
            
            echo "Successfully committed version ${NEW_VERSION}"
          else
            echo "No version update to commit"
          fi

  docker:
    runs-on: ubuntu-latest
    needs: version-bump   # ждём завершения version-bump
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASS }}" | docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin

      - name: Build and Push via Makefile
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
        run: |
          make build
          make push