name: Version Bump

on:
  push:
    branches: [ "develop" ]

jobs:
  version-bump:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install toml
        run: pip install toml

      - name: Bump version based on commit keywords
        run: |
          # Получаем последний коммит
          LAST_COMMIT="${{ github.event.head_commit.message }}"
          echo "Last commit: $LAST_COMMIT"
          
          # Пропускаем, если это уже version bump
          if [[ "$LAST_COMMIT" == *"bump version"* ]]; then
            echo "Skipping version bump - last commit was already a version bump"
            exit 0
          fi
          
          # Проверяем ключевые слова и повышаем версию
          python << EOF
          import toml
          from pathlib import Path
          
          commit_msg = "$LAST_COMMIT"
          print(f"Analyzing commit: {commit_msg}")
          
          # Читаем текущую версию из pyproject.toml
          pyproject_path = Path("pyproject.toml")
          data = toml.load(pyproject_path)
          current_version = data["project"]["version"]
          print(f"Current version: {current_version}")
          
          version_parts = current_version.split(".")
          major, minor, patch = int(version_parts[0]), int(version_parts[1]), int(version_parts[2])
          
          # Определяем тип повышения на основе ключевых слов В НАЧАЛЕ коммита
          if commit_msg.startswith("[major]"):
              major += 1
              minor = 0
              patch = 0
              bump_type = "major"
              print("Found [major] at start - bumping major version")
          elif commit_msg.startswith("[minor]"):
              minor += 1
              patch = 0
              bump_type = "minor"
              print("Found [minor] at start - bumping minor version")
          elif commit_msg.startswith("[fix]"):
              patch += 1
              bump_type = "patch"
              print("Found [fix] at start - bumping patch version")
          else:
              print("No version bump keywords found at start ([fix], [minor], [major]) - skipping")
              exit(0)
          
          new_version = f"{major}.{minor}.{patch}"
          data["project"]["version"] = new_version
          
          # Записываем в pyproject.toml
          with open(pyproject_path, "w") as f:
              toml.dump(data, f)
          
          print(f"Version updated: {current_version} -> {new_version} ({bump_type})")
          print(f"UPDATED=true")
          print(f"NEW_VERSION={new_version}")
          print(f"BUMP_TYPE={bump_type}")
          EOF

      - name: Commit version change
        run: |
          # Проверяем, была ли обновлена версия
          NEW_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          CURRENT_COMMIT="${{ github.event.head_commit.message }}"
          
          if [[ "$CURRENT_COMMIT" == "[fix]"* ]] || [[ "$CURRENT_COMMIT" == "[minor]"* ]] || [[ "$CURRENT_COMMIT" == "[major]"* ]]; then
            git config user.name github-actions
            git config user.email github-actions@github.com
            git add pyproject.toml
            git commit -m "chore: bump version to ${NEW_VERSION}"
            git push
            echo "Successfully bumped version to ${NEW_VERSION}"
          else
            echo "No version bump needed"
          fi