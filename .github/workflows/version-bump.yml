name: Version Bump

on:
  push:
    branches: [ "develop" ]

jobs:
  version-bump:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install toml
        run: pip install toml

      - name: Bump version based on commit keywords
        run: |
          echo "Analyzing commits from this push..."
          
          # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–º–∏—Ç—ã –∏–∑ —ç—Ç–æ–≥–æ –ø—É—à–∞
          COMMITS=$(git log --pretty=format:"%s" ${{ github.event.before }}..${{ github.event.after }})
          echo "Commits in this push:"
          echo "$COMMITS"
          
          # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç - —ç—Ç–æ version bump
          LAST_COMMIT=$(git log -1 --pretty=format:"%s")
          if [[ "$LAST_COMMIT" == *"bump version"* ]]; then
            echo "Skipping - last commit was version bump"
            exit 0
          fi
          
          python << 'EOF'
          import toml
          import os
          from pathlib import Path
          
          # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–º–∏—Ç—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
          commits_text = """$COMMITS"""
          commits = [line.strip() for line in commits_text.split('\n') if line.strip()]
          
          print(f"Analyzing {len(commits)} commits...")
          for i, commit in enumerate(commits):
              print(f"  {i+1}. {commit}")
          
          # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
          pyproject_path = Path("pyproject.toml")
          data = toml.load(pyproject_path)
          current_version = data["project"]["version"]
          print(f"\nCurrent version: {current_version}")
          
          version_parts = current_version.split(".")
          major, minor, patch = int(version_parts[0]), int(version_parts[1]), int(version_parts[2])
          
          # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–º–∏—Ç—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω–∏—è
          has_major = False
          has_minor = False  
          has_fix = False
          
          for commit in commits:
              if commit.startswith("[major]"):
                  has_major = True
                  print(f"Found [major] in: {commit}")
              elif commit.startswith("[minor]"):
                  has_minor = True
                  print(f"Found [minor] in: {commit}")
              elif commit.startswith("[fix]"):
                  has_fix = True
                  print(f"Found [fix] in: {commit}")
          
          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–≤—ã—à–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: major > minor > fix)
          if has_major:
              major += 1
              minor = 0
              patch = 0
              bump_type = "major"
              print("\nüöÄ Bumping MAJOR version")
          elif has_minor:
              minor += 1
              patch = 0
              bump_type = "minor" 
              print("\nüìà Bumping MINOR version")
          elif has_fix:
              patch += 1
              bump_type = "patch"
              print("\nüîß Bumping PATCH version")
          else:
              print("\n‚ùå No version bump keywords found - skipping")
              exit(0)
          
          new_version = f"{major}.{minor}.{patch}"
          data["project"]["version"] = new_version
          
          # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ pyproject.toml
          with open(pyproject_path, "w") as f:
              toml.dump(data, f)
          
          print(f"‚úÖ Version updated: {current_version} -> {new_version} ({bump_type})")
          EOF
        env:
          COMMITS: ${{ steps.get_commits.outputs.commits }}

      - name: Commit version change
        run: |
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ñ–∞–π–ª
          if git diff --quiet pyproject.toml; then
            echo "‚ÑπÔ∏è  No version changes to commit"
          else
            NEW_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
            git config user.name github-actions
            git config user.email github-actions@github.com
            git add pyproject.toml
            git commit -m "chore: bump version to ${NEW_VERSION}"
            git push
            echo "‚úÖ Successfully bumped version to ${NEW_VERSION}"
          fi