name: Build and Push

on:
  push:
    branches: [ "develop" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.CICD_TOKEN }}
          submodules: recursive

      - name: Setup
        run: |
          pip install toml

      - name: Calculate version
        id: version
        run: |
          COMMITS=$(git log --oneline --grep="chore: bump version" -n 1 --pretty=format:"%H" || echo "")
          RANGE="${COMMITS:+$COMMITS..HEAD}"
          RANGE="${RANGE:-$(git rev-list --max-count=50 HEAD | tail -n1)..HEAD}"
          
          MSGS=$(git log --pretty=format:"%s" $RANGE | grep -v "chore: bump version" || echo "")
          [ -z "$MSGS" ] && { echo "skip=true" >> $GITHUB_OUTPUT; exit 0; }
          
          python3 -c "
          import toml; from pathlib import Path
          msgs = '''$MSGS'''.strip().split('\n')
          data = toml.load('pyproject.toml')
          v = data['project']['version'].split('.')
          major, minor, patch = int(v[0]), int(v[1]), int(v[2])
          
          if any(m.startswith('[major]') for m in msgs): major += 1; minor = patch = 0
          elif any(m.startswith('[minor]') for m in msgs): minor += 1; patch = 0  
          elif any(m.startswith('[fix]') for m in msgs): patch += 1
          else: exit(0)
          
          new_v = f'{major}.{minor}.{patch}'
          print(f'new_version={new_v}')
          with open('pyproject.toml', 'r') as f: content = f.read()
          with open('pyproject.toml', 'w') as f: 
              f.write(content.replace(f'version = \"{data[\"project\"][\"version\"]}\"', f'version = \"{new_v}\"'))
          " >> $GITHUB_OUTPUT

      - name: Build and push
        if: steps.version.outputs.skip != 'true'
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          make build
          make push
          
          NEW_VERSION=$(grep -m1 '^version' pyproject.toml | sed 's/version *= *"//; s/"//')
          git add pyproject.toml
          git commit -m "chore: bump version to ${NEW_VERSION}"
          git push origin develop