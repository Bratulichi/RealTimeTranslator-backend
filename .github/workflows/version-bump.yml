name: Version Bump and Docker Build

on:
  push:
    branches: [ "develop" ]

jobs:
  version-and-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive  # –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –ø–æ–¥–º–æ–¥—É–ª–∏

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install toml
        run: pip install toml

      - name: Calculate new version (without committing)
        id: version
        run: |
          echo "=== Calculating new version ==="
          
          # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç —Å version bump
          LAST_VERSION_COMMIT=$(git log --oneline --grep="bump version" -n 1 --pretty=format:"%H" || echo "")
          
          if [ -n "$LAST_VERSION_COMMIT" ]; then
            echo "Last version bump commit: $LAST_VERSION_COMMIT"
            COMMITS_RANGE="${LAST_VERSION_COMMIT}..HEAD"
          else
            echo "No previous version bump found, analyzing last 50 commits"
            COMMITS_RANGE="$(git rev-list --max-count=50 HEAD | tail -n1)..HEAD"
          fi
          
          echo "Analyzing commits in range: $COMMITS_RANGE"
          COMMITS=$(git log --pretty=format:"%s" $COMMITS_RANGE | grep -v "bump version" || echo "")
          
          if [ -z "$COMMITS" ]; then
            echo "No commits to analyze"
            echo "should_bump=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Commits to analyze:"
          echo "$COMMITS"
          
          export COMMITS="$COMMITS"
          
          python << 'EOF'
          import toml
          import os
          import re
          from pathlib import Path
          
          commits_text = os.environ.get('COMMITS', '').strip()
          if not commits_text:
              print("No commits to analyze")
              exit(0)
              
          commits = [line.strip() for line in commits_text.split('\n') if line.strip()]
          
          print(f"Analyzing {len(commits)} commits:")
          for i, commit in enumerate(commits, 1):
              print(f"  {i}. {commit}")
          
          # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
          pyproject_path = Path("pyproject.toml")
          data = toml.load(pyproject_path)
          current_version = data["project"]["version"]
          print(f"\nCurrent version: {current_version}")
          
          version_parts = current_version.split(".")
          major, minor, patch = int(version_parts[0]), int(version_parts[1]), int(version_parts[2])
          
          # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–º–∏—Ç—ã
          has_major = has_minor = has_fix = False
          
          for commit in commits:
              if commit.startswith("[major]"):
                  has_major = True
                  print(f"  ‚Üí Found [major]: {commit}")
              elif commit.startswith("[minor]"):
                  has_minor = True
                  print(f"  ‚Üí Found [minor]: {commit}")
              elif commit.startswith("[fix]"):
                  has_fix = True
                  print(f"  ‚Üí Found [fix]: {commit}")
          
          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
          if has_major:
              major += 1
              minor = patch = 0
              bump_type = "major"
          elif has_minor:
              minor += 1
              patch = 0
              bump_type = "minor"
          elif has_fix:
              patch += 1
              bump_type = "patch"
          else:
              print("No version keywords found - no bump needed")
              with open("no_bump.flag", "w") as f:
                  f.write("no_bump")
              exit(0)
          
          new_version = f"{major}.{minor}.{patch}"
          print(f"\nüìã Calculated version: {current_version} ‚Üí {new_version} ({bump_type})")
          
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
          with open("version_info.txt", "w") as f:
              f.write(f"{current_version}\n{new_version}\n{bump_type}")
              
          print(f"‚úÖ Version calculation complete")
          EOF
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          if [ -f "no_bump.flag" ]; then
            echo "should_bump=false" >> $GITHUB_OUTPUT
            echo "No version bump needed"
          elif [ -f "version_info.txt" ]; then
            NEW_VERSION=$(sed -n '2p' version_info.txt)
            BUMP_TYPE=$(sed -n '3p' version_info.txt)
            echo "should_bump=true" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
            echo "‚úÖ Will bump to version $NEW_VERSION ($BUMP_TYPE)"
          else
            echo "should_bump=false" >> $GITHUB_OUTPUT
            echo "‚ùå Version calculation failed"
          fi

      - name: Update version in pyproject.toml (temporary)
        if: steps.version.outputs.should_bump == 'true'
        run: |
          echo "=== Temporarily updating pyproject.toml for Docker build ==="
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          
          python << EOF
          import re
          from pathlib import Path
          
          pyproject_path = Path("pyproject.toml")
          with open(pyproject_path, 'r', encoding='utf-8') as f:
              content = f.read()
          
          version_pattern = r'^version\s*=\s*["\'][^"\']*["\']'
          new_version_line = f'version = "{NEW_VERSION}"'
          updated_content = re.sub(version_pattern, new_version_line, content, flags=re.MULTILINE)
          
          with open(pyproject_path, 'w', encoding='utf-8') as f:
              f.write(updated_content)
          
          print(f"‚úÖ Updated pyproject.toml to version {NEW_VERSION} (temporary)")
          EOF

      - name: Set up Docker Buildx
        if: steps.version.outputs.should_bump == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Test Docker build
        if: steps.version.outputs.should_bump == 'true'
        run: |
          echo "=== Testing Docker build with new version ==="
          
          # –ü—Ä–æ–±—É–µ–º —Å–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑
          if docker build -t test-build:${{ steps.version.outputs.new_version }} .; then
            echo "‚úÖ Docker build successful"
            echo "docker_build_success=true" >> $GITHUB_ENV
          else
            echo "‚ùå Docker build failed"
            echo "docker_build_success=false" >> $GITHUB_ENV
            exit 1
          fi

      - name: Log in to DockerHub
        if: steps.version.outputs.should_bump == 'true' && env.docker_build_success == 'true'
        run: echo "${{ secrets.DOCKER_PASS }}" | docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin

      - name: Build and Push Docker image
        if: steps.version.outputs.should_bump == 'true' && env.docker_build_success == 'true'
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          NEW_VERSION: ${{ steps.version.outputs.new_version }}
        run: |
          echo "=== Building and pushing final Docker image ==="
          
          # –°–æ–±–∏—Ä–∞–µ–º —Å —Ç–µ–≥–∞–º–∏
          docker build -t $DOCKER_USER/realtimetranslator-backend:$NEW_VERSION \
                       -t $DOCKER_USER/realtimetranslator-backend:latest .
          
          # –ü—É—à–∏–º –æ–±–∞ —Ç–µ–≥–∞
          docker push $DOCKER_USER/realtimetranslator-backend:$NEW_VERSION
          docker push $DOCKER_USER/realtimetranslator-backend:latest
          
          echo "‚úÖ Docker images pushed successfully"

      - name: Commit version change (only after successful Docker build)
        if: steps.version.outputs.should_bump == 'true' && env.docker_build_success == 'true'
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          BUMP_TYPE="${{ steps.version.outputs.bump_type }}"
          
          echo "=== Committing version change ==="
          
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add pyproject.toml
          git commit -m "chore: bump version to ${NEW_VERSION} (${BUMP_TYPE})"
          git push
          
          echo "‚úÖ Successfully committed version ${NEW_VERSION}"

      - name: Cleanup on failure
        if: failure() && steps.version.outputs.should_bump == 'true'
        run: |
          echo "=== Build failed, reverting pyproject.toml ==="
          git checkout HEAD -- pyproject.toml
          echo "‚ùå Version bump cancelled due to build failure"